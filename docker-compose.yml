version: '3.7'

services:

  # The 'setup' service runs a one-off script which initializes the
  # 'logstash_internal' and 'kibana_system' users inside Elasticsearch with the
  # values of the passwords defined in the '.env' file.
  #
  # This task is only performed during the *initial* startup of the stack. On all
  # subsequent runs, the service simply returns immediately, without performing
  # any modification to existing users.
  setup:
    build:
      context: apps/elk-stack/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - robo-chef
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: apps/elk-stack/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    volumes:
      - ./apps/elk-stack/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - robo-chef

  logstash:
    build:
      context: apps/elk-stack/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./apps/elk-stack/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./apps/elk-stack/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - robo-chef
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: apps/elk-stack/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./apps/elk-stack/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - robo-chef
    depends_on:
      - elasticsearch
  
  api:
    container_name: api
    build:
      context: ./
      cache_from:
        - my-base-image:nx-base
      dockerfile: ./apps/api/Dockerfile
      args:
        NODE_ENV: "development"
        BUILD_FLAG: ""
    image: api:nx-dev
    ports:
      - 3333:3333
    environment:
      NODE_ENV: "development"
      PORT: 3333
    networks:
      - robo-chef
    restart: on-failure
    depends_on:
      - elasticsearch

  web:
    container_name: web
    build:
      context: ./
      cache_from:
        - my-base-image:nx-base
      dockerfile: ./apps/web/Dockerfile
      args:
        NODE_ENV: "production"
        BUILD_FLAG: ""
        GRAPHQL_ENDPOINT: "http://localhost:3333/graphql"
    image: web:nx-dev
    ports:
      - 4200:4200
    environment:
      NODE_ENV: "production"
      PORT: 4200
      GRAPHQL_ENDPOINT: "http://localhost:3333/graphql"
    networks:
      - robo-chef
    restart: on-failure
    depends_on:
      - api

networks:
  robo-chef:
    driver: bridge

volumes:
  setup:
  elasticsearch: